import map from 'lodash/map';
import Vue, { ComponentOptions } from 'vue';
import escapeHtml from '../utils/escape-html';
import * as meta from '../utils/meta';
import { getTitle } from './title';

// Attribute name for monitoring tags generated by this mixin.
const mixinAttribute = 'data-vue-meta';

const defaultMeta = (vm: Vue): Meta => [
  ...meta.generateTitle(getTitle(vm) || 'NUSWhispers'),
  ...meta.defaultDescription(),
  ...meta.defaultImage(),
];

interface Dictionary<T> { [key: string]: T; }
type Meta = Array<Dictionary<string>>;

function getMeta(vm: Vue): Meta {
  const { meta } = vm.$options;

  const metaTags = meta && typeof meta === 'function' ?
    meta.call(vm) :
    meta;

  return metaTags || defaultMeta(vm);
}

function generateMetaAttr(m: Dictionary<string>): string {
  return map(m, (value: string, key: string) => `${key}="${value}"`).join(' ');
}

function generateMetaHtml(meta: Meta): string {
  return meta
    .map((m: Dictionary<string>) => `<meta ${generateMetaAttr(m)} ${mixinAttribute}>`)
    .join('');
}

const serverMixin: ComponentOptions<Vue> = {
  created() {
    const meta = getMeta(this) || defaultMeta(this);
    this.$ssrContext.meta = generateMetaHtml(meta);
  },
};

const clientMixin: ComponentOptions<Vue> = {
  mounted() {
    // Naive implementation.
    // Remove all existing generated meta tags, then add all in.

    Array.prototype.forEach.call(
      document.querySelectorAll(`[${mixinAttribute}]`),
      (e: Element) => {
        if (e.parentNode) {
          e.parentNode.removeChild(e);
        }
      },
    );

    const meta = getMeta(this);
    if (meta) {
      const headElement = document.querySelector('head');

      if (!headElement) {
        return;
      }

      meta.map((m: Dictionary<string>) => {
        const ele: Element = document.createElement('meta');

        map(m, (value: string, key: string) => ele.setAttribute(key, escapeHtml(value)));
        ele.setAttribute(mixinAttribute, '');

        headElement.appendChild(ele);
      });
    }
  },
};

export default process.env.VUE_ENV === 'server' ? serverMixin : clientMixin;
